import uuid
import AIMS.Repository as repo
from sqlite3 import Error
from AIMS.Employee import employee
import datetime


class supervising_team:

    def __init__(self, team_id):
        self.team_id = team_id

    def selection(self):
        ch = ''
        while ch != '2':
            ch = input("1.Make your Report 2.Exit: ")
            if ch == '1':
                self.check_complain_exist()
            elif ch == '2':
                return True
            else:
                print("Invalid choice")

    def report_accident(self):
        try:
            connection = repo.sql_connection()
            cursor = connection.cursor()
            complain_id = cursor.execute(
                "select complain_id from supervising_team where team_id = \'{}\'".format(self.team_id)).fetchall()[0][0]
            date_of_accident = cursor.execute(
                "select created_at from complains where complain_id = \'{}\'".format(complain_id)).fetchall()[0][0]
            report_id = str(uuid.uuid4())
            created_at = datetime.datetime.today()
            injured_people = input("Enter how many people got injured : ")
            dead_people = input("How many lives we have lost : ")
            while not injured_people.isdigit():
                injured_people = input("Enter how many people got injured : ")
            while not dead_people.isdigit():
                dead_people = input("How many lives we have lost : ")
            short_description = input("Please give short description of the incident happened: ")
            while not short_description:
                short_description = input("Please give the right short description of the incident happened: ")
            root_cause = input("Enter the root cause of the incident: ")
            while "".join(root_cause.split(" ")).isdigit():
                root_cause = input("Enter the root cause of the incident: ")
            feedback = input("Enter your feedback: ")
            while "".join(feedback.split(" ")).isdigit():
                feedback = input("Enter your feedback: ")
            cursor.execute(
                "Insert into final_report(report_id,complain_id,feedback,date_of_accident,injured_people,dead_people,"
                "short_description,root_cause,created_at) VALUES(\'{}\',\'{}\',\'{}\',\'{}\',{},{},\'{}\',\'{}\',\'{}\')".format(
                    report_id, complain_id, feedback, date_of_accident, injured_people, dead_people,
                    short_description,
                    root_cause, created_at))
            connection.commit()
            cursor.close()
            print("Report submitted")
            return True
        except Error as e:
            print(e)
            return False

    def check_complain_exist(self):
        try:
            connection = repo.sql_connection()
            cursor = connection.cursor()
            complain_id = cursor.execute(
                "select complain_id from supervising_team where team_id = \'{}\'".format(self.team_id)).fetchall()[0][0]
            report = cursor.execute(
                "select * from final_report where complain_id = \'{}\'".format(complain_id)).fetchall()
            if report:
                print("Report is already generated by your team: ")
                for row in report:
                    print("Complain id: ", row[1])
                    print("date_of_accident: ", row[2])
                    print("Injured people: ", row[3])
                    print("Dead people: ", row[4])
                    print("Short Description", row[5])
                    print("Root cause", row[6])
                    print("Feedback", row[7])
                    print("Created_at", row[8])
                    print("-------------------------")
                return False
            print("No report is generated yet,pLease generate your report")
            return self.report_accident()
        except Error as e:
            print(e)
            return False
